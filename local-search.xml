<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Discuss</title>
    <link href="/2022/07/11/discuss/"/>
    <url>/2022/07/11/discuss/</url>
    
    <content type="html"><![CDATA[<h1 id="口嗨梦想家"><a href="#口嗨梦想家" class="headerlink" title="口嗨梦想家"></a>口嗨梦想家</h1><p>唠点啥吧……</p>]]></content>
    
    
    
    <tags>
      
      <tag>discuss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2022/07/10/git/"/>
    <url>/2022/07/10/git/</url>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>详细的命令解释查询<br><a href="https://www.linuxcool.com/">linux 命令大全</a><br><a href="https://linux.utils.fun/">linux 搜索引擎</a></p><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><h3 id="检查-git-是否安装"><a href="#检查-git-是否安装" class="headerlink" title="检查 git 是否安装"></a>检查 git 是否安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git --version <br>&gt; git version 1.8.3.1<br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>Centos Redhat 系统使用 yum 安装 git</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum install git<br></code></pre></td></tr></table></figure><ul><li>Ubuntu Debian 系统使用 apt</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ apt-get install git<br></code></pre></td></tr></table></figure><h2 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h2><h3 id="检查-system-global-local-配置"><a href="#检查-system-global-local-配置" class="headerlink" title="检查 system global local 配置"></a>检查 system global local 配置</h3><p>查看所有配置及其所在的文件, 早期版本不支持此命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --list --show-origin<br></code></pre></td></tr></table></figure><p>查看各级别 git 配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --system --list      <span class="hljs-comment"># 查看系统的 git 配置</span><br>$ git config --global --list      <span class="hljs-comment"># 查看系统用户的 git 配置</span><br>$ git config --<span class="hljs-built_in">local</span> --list       <span class="hljs-comment"># 查看当前库 的 git 配置</span><br>$ git config --list               <span class="hljs-comment"># 列出上述所有配置, 可能出现重复项</span><br></code></pre></td></tr></table></figure><ul><li>system: &#x2F;etc&#x2F;gitconfig 文件, 包含系统上每一个用户及他们仓库的通用配置, 如果在执行 git config 时带上 –system 选项，那么它就会读写该文件中的配置变量.</li><li>global: ~&#x2F;.gitconfig 或 ~&#x2F;.config&#x2F;git&#x2F;config 文件, 只针对当前用户, 你可以传递 –global 选项让 Git 读写此文件，这会对你系统上 所有 的仓库生效.</li><li>local: 当前使用仓库的 Git 目录中的 config 文件（即 .git&#x2F;config）, 针对该仓库, 你可以传递 –local 选项让 Git 强制读写此文件, 虽然默认情况下用的就是它</li></ul><p>相同的配置, 优先使用范围小的配置 local &gt; global &gt; system</p><h3 id="选择查看配置"><a href="#选择查看配置" class="headerlink" title="选择查看配置"></a>选择查看配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git condig &lt;key&gt;      <br><br>$ git config user.name<br>&gt; facser<br></code></pre></td></tr></table></figure><h3 id="添加用户信息"><a href="#添加用户信息" class="headerlink" title="添加用户信息"></a>添加用户信息</h3><p>为当前系统用户添加用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;&lt;user.name&gt;&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;&lt;mail&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>为当前库添加用户信息, 库的配置会覆盖系统配置中相同的部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --<span class="hljs-built_in">local</span> user.name <span class="hljs-string">&quot;&lt;user.name&gt;&quot;</span><br>$ git config --<span class="hljs-built_in">local</span> user.email <span class="hljs-string">&quot;&lt;mail&gt;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="修改-git-常用配置"><a href="#修改-git-常用配置" class="headerlink" title="修改 git 常用配置"></a>修改 git 常用配置</h3><ul><li>编辑器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global core.editor vim <br></code></pre></td></tr></table></figure><ul><li>commit 模板</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global commit.template  &lt;file&gt;<br></code></pre></td></tr></table></figure><h2 id="git-仓库"><a href="#git-仓库" class="headerlink" title="git 仓库"></a>git 仓库</h2><h3 id="本地创建仓库"><a href="#本地创建仓库" class="headerlink" title="本地创建仓库"></a>本地创建仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init<br></code></pre></td></tr></table></figure><p>该命令将在当前目录创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件。 该命令是一个初始化的操作，还未对文件追踪。</p><h3 id="github-创建仓库克"><a href="#github-创建仓库克" class="headerlink" title="github 创建仓库克"></a>github 创建仓库克</h3><p>在 github 创建仓库后，将仓库克隆到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;Repository url&gt;<br></code></pre></td></tr></table></figure><h3 id="本地仓库关联-github-仓库"><a href="#本地仓库关联-github-仓库" class="headerlink" title="本地仓库关联 github 仓库"></a>本地仓库关联 github 仓库</h3><p>github 上必须先创建一个仓库, 才可以将本地代码上传到 github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init                                    <span class="hljs-comment"># 初始化本地仓库</span><br>$ git add --all                               <span class="hljs-comment"># 追踪目录下所有文件修改</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>            <span class="hljs-comment"># 记录修改生成一个版本到本地仓库</span><br>$ git remote origin add &lt;Repository url&gt;      <span class="hljs-comment"># 将远程仓库命名 origin 并关联本地仓库</span><br>$ git push -u origin master                   <span class="hljs-comment"># 提交代码到 origin 仓库 master 分支</span><br></code></pre></td></tr></table></figure><ul><li>本地仓库可以关联多个远程仓库</li><li>本地仓库可以指定提交到某个远程仓库</li><li>第一远程仓库默认命名为 origin</li></ul><h2 id="本地仓库操作"><a href="#本地仓库操作" class="headerlink" title="本地仓库操作"></a>本地仓库操作</h2><p>工作区 – git add –&gt; 暂存区 – git commit –&gt; 本地仓库</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>将工作区的修改保存至暂存区, 追踪修改内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add &lt;file&gt;     <span class="hljs-comment"># 记录指定文件修改</span><br>$ git add .          <span class="hljs-comment"># 记录当前目录下所有文件修改(上层文件未记录)</span><br>$ git add --all      <span class="hljs-comment"># 记录当前项目所有文件修改(推荐)</span><br></code></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>查看当前状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status -s           <span class="hljs-comment"># -s --short 显示简略信息</span><br>&gt; M  README               <span class="hljs-comment"># 表示该文件已 add 和 commit</span><br>&gt; MM Rakefile             <span class="hljs-comment"># 已 commit 的文件 最新的修改未 add</span><br>&gt; A  lib/git.rb           <span class="hljs-comment"># 从未 commit 但已 add </span><br>&gt; AM lib/git.md           <span class="hljs-comment"># 从未 commit 但 add 过, 最新修改未 add </span><br>&gt; ?? LICENSE.txt          <span class="hljs-comment"># 未 add 未追踪的文件</span><br></code></pre></td></tr></table></figure><p>左边有字母表示已 add, 进入暂存区, M 表示 commit 过, A 表示未 commit 过<br>右边有字母表示最新的修改未 add 进入暂存区</p><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>忽略指定文件, 不对其追踪和提交, 文件名固定为 .gitignore, 同项目可创建多个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> .gitignore<br>&gt; *.pyc              <span class="hljs-comment"># 忽略当前项目内所有 .pyc 结尾的文件</span><br>&gt; !main.pyc          <span class="hljs-comment"># 强制跟踪所有 main.pyc</span><br>&gt; /*.<span class="hljs-built_in">log</span>             <span class="hljs-comment"># 忽略当前目录下 .log 结尾文件, 不影响上层的文件</span><br>&gt; temp/              <span class="hljs-comment"># 忽略整个项目内所有 temp 文件夹</span><br>&gt; /lib/*.pyc         <span class="hljs-comment"># 忽略当前 lib 目录 下一级的 pyc 文件, lib 下多层目录不受影响  </span><br>&gt; lib/**/.pyc        <span class="hljs-comment"># 忽略项目内所有 lib 文件夹内的 pyc 文件</span><br></code></pre></td></tr></table></figure><h2 id="SSH-key-密钥"><a href="#SSH-key-密钥" class="headerlink" title="SSH key 密钥"></a>SSH key 密钥</h2><p>本地系统创建公钥和私钥, 将公钥内容复制到 github 账户 SSH key 设置, 将系统与 github 账户绑定<br>绑定后系统可以通过 ssh 方式下载账户下的代码且 push 代码时无需输入密码</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><ul><li>id_rsa (私钥)</li><li>id_rsa.pub (公钥)</li></ul><p>使用以下命令生成密钥, 生成时会显示存放为<br>一般为 &#x2F;root&#x2F;.ssh&#x2F;id_rsa  &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen                             <span class="hljs-comment"># 自动生成密钥</span><br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;&lt;user.mail&gt;&quot;</span>     <span class="hljs-comment"># 生成 rsa 类型带邮箱注释信息的密钥</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
