<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2022/07/18/Linux/"/>
    <url>/2022/07/18/Linux/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><a href="https://www.linuxcool.com/">linux 命令</a></p><h2 id="基本概要"><a href="#基本概要" class="headerlink" title="基本概要"></a>基本概要</h2><h3 id="帮助和查找"><a href="#帮助和查找" class="headerlink" title="帮助和查找"></a>帮助和查找</h3><h4 id="man-manual"><a href="#man-manual" class="headerlink" title="man : manual"></a><a href="https://www.linuxcool.com/man">man</a> : manual</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ man &lt;<span class="hljs-built_in">command</span>&gt;                                 <span class="hljs-comment"># man (manual) 帮助手册, 查看命令的帮助手册</span><br>$ man -f &lt;<span class="hljs-built_in">command</span>&gt;                              <span class="hljs-comment"># 显示命令的简短描述</span><br><br>$ man -k &lt;<span class="hljs-built_in">command</span>&gt;                              <span class="hljs-comment"># 只记得部分命令, 列出所有含有字符的命令</span><br></code></pre></td></tr></table></figure><h4 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a><a href="https://www.linuxcool.com/whatis">whatis</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ whatis &lt;<span class="hljs-built_in">command</span>&gt;                             <span class="hljs-comment"># 显示命令的简短描述, 等同于 man -f &lt;command&gt;</span><br></code></pre></td></tr></table></figure><h4 id="info"><a href="#info" class="headerlink" title="info"></a><a href="https://wangchujiang.com/linux-command/c/info.html">info</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ info &lt;<span class="hljs-built_in">command</span>&gt;                               <span class="hljs-comment"># 显示命令的 info 文档, 内容与帮助文档相似</span><br></code></pre></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a><a href="https://wangchujiang.com/linux-command/c/which.html">which</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">which</span> &lt;<span class="hljs-built_in">command</span>&gt;                              <span class="hljs-comment"># 查看命令所在位置</span><br></code></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h3><table><thead><tr><th align="center">位置</th><th align="center">全称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>/etc</code></td><td align="center">Configuration Files</td><td align="center">系统和软件的配置文件</td></tr><tr><td align="center"><code>/usr</code></td><td align="center">Unix Software Resource</td><td align="center">应用程序默认安装位置</td></tr><tr><td align="center"><code>/dev</code></td><td align="center">Device Files</td><td align="center">系统外围设备</td></tr><tr><td align="center"><code>/mnt</code></td><td align="center">Mount Directory</td><td align="center">空目录, 用于临时挂载文件系统</td></tr><tr><td align="center"><code>/bin</code></td><td align="center">User Binaries</td><td align="center">所有用户可用的基本命令</td></tr><tr><td align="center"><code>/home</code></td><td align="center">Home Directories</td><td align="center">普通用户的主目录</td></tr><tr><td align="center"><code>/proc</code></td><td align="center">Process Information</td><td align="center">虚拟文件系统, 以映射系统与进程在内存中的信息</td></tr></tbody></table><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a><a href="https://www.linuxcool.com/tree">tree</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tree                                          <span class="hljs-comment"># 显示目录的树状层级图</span><br>$ tree -f                                       <span class="hljs-comment"># 树状图显示绝对路径</span><br></code></pre></td></tr></table></figure><h4 id="pwd-print-working-directory"><a href="#pwd-print-working-directory" class="headerlink" title="pwd :  print working directory"></a><a href="https://www.linuxcool.com/pwd">pwd</a> :  print working directory</h4><h4 id="dirs-directories"><a href="#dirs-directories" class="headerlink" title="dirs : directories"></a><a href="https://www.linuxcool.com/dirs">dirs</a> : directories</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span>                                           <span class="hljs-comment"># 显示当前路径</span><br>$ <span class="hljs-built_in">dirs</span>                                          <span class="hljs-comment"># 显示当前路径</span><br></code></pre></td></tr></table></figure><h4 id="ls-list-files"><a href="#ls-list-files" class="headerlink" title="ls : list files"></a><a href="https://www.linuxcool.com/ls">ls</a> : list files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span>                                            <span class="hljs-comment"># 显示当前目录下所有文件及目录</span><br>$ <span class="hljs-built_in">ls</span> -a                                         <span class="hljs-comment"># --all 额外显示隐藏文件及目录</span><br>$ <span class="hljs-built_in">ls</span> -l                                         <span class="hljs-comment"># 使用长格式显示文集及目录详细信息</span><br>$ <span class="hljs-built_in">ls</span> -R                                         <span class="hljs-comment"># --recursive 递归显示所有子目录</span><br>$ <span class="hljs-built_in">ls</span> -S                                         <span class="hljs-comment"># sort 根据文件大小排序</span><br><br>$ <span class="hljs-built_in">ls</span> -alS                                       <span class="hljs-comment"># 参数可无顺序合并, 结果按参数显示</span><br></code></pre></td></tr></table></figure><h4 id="file"><a href="#file" class="headerlink" title="file"></a><a href="">file</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file &lt;file&gt;                                                  <span class="hljs-comment"># 显示文件类型</span><br>&gt; a.py: Python script, UTF-8 Unicode text executable           <span class="hljs-comment"># 文件名, 类型, 编码类型</span><br></code></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="cd-change-directory"><a href="#cd-change-directory" class="headerlink" title="cd : change directory"></a><a href="https://www.linuxcool.com/cd">cd</a> : change directory</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> &lt;<span class="hljs-built_in">dir</span>&gt;                                      <span class="hljs-comment"># 切换到 &lt;dir&gt; 目录</span><br><br>$ <span class="hljs-built_in">cd</span> ..                                         <span class="hljs-comment"># 返回上级目录</span><br>$ <span class="hljs-built_in">cd</span> -                                          <span class="hljs-comment"># 回到上次所有在目录</span><br><br></code></pre></td></tr></table></figure><h4 id="mkdir-make-directories"><a href="#mkdir-make-directories" class="headerlink" title="mkdir : make directories"></a><a href="https://www.linuxcool.com/mkdir">mkdir</a> : make directories</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> &lt;<span class="hljs-built_in">dir</span>&gt;                                   <span class="hljs-comment"># 创建目录</span><br><br>$ <span class="hljs-built_in">mkdir</span> -p &lt;<span class="hljs-built_in">dir</span>&gt;/&lt;<span class="hljs-built_in">dir</span>&gt;                          <span class="hljs-comment"># 创建多级目录</span><br></code></pre></td></tr></table></figure><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a><a href="https://www.linuxcool.com/touch">touch</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> &lt;file&gt; &lt;file&gt;                           <span class="hljs-comment"># 文件不存在, 创建文件, 可同时创建多个</span><br>$ <span class="hljs-built_in">touch</span> &lt;file&gt;                                  <span class="hljs-comment"># 文件存在, 修改文件读取和修改时间</span><br></code></pre></td></tr></table></figure><h4 id="rm-remove"><a href="#rm-remove" class="headerlink" title="rm :  remove"></a><a href="https://www.linuxcool.com/rm">rm</a> :  remove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">rm</span> -f                                         <span class="hljs-comment"># --force 强制删除文件, 不询问</span><br>$ <span class="hljs-built_in">rm</span> -r                                         <span class="hljs-comment"># -R, --recursive 递归删除, 删除文件夹及下所有文件</span><br>$ <span class="hljs-built_in">rmdir</span>                                         <span class="hljs-comment"># 删除空目录, 目录下有文件或文件夹报错</span><br></code></pre></td></tr></table></figure><h4 id="mv-move"><a href="#mv-move" class="headerlink" title="mv : move"></a><a href="https://linux.alianga.com/c/mv.html">mv</a> : move</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mv</span> &lt;file|<span class="hljs-built_in">dir</span>&gt; &lt;file|<span class="hljs-built_in">dir</span>&gt;                      <span class="hljs-comment"># 剪切复制并重新命名, 文件目录均可</span><br>$ <span class="hljs-built_in">mv</span> file_name  <span class="hljs-built_in">dir</span>/                            <span class="hljs-comment"># 保存文件名移动</span><br><br>$ <span class="hljs-built_in">mv</span> -v                                         <span class="hljs-comment"># --verbose 显示过程, 打印原名及更改后名</span><br>$ <span class="hljs-built_in">mv</span> -f                                         <span class="hljs-comment"># --force 强制移动, 存在同名则覆盖</span><br>$ <span class="hljs-built_in">mv</span> -n                                         <span class="hljs-comment"># --no-clobber 存在同名文件则不移动</span><br><br>$ <span class="hljs-built_in">mv</span> -bv a.log  b.log                           <span class="hljs-comment"># backup 备份移动, 存在同名时, 修改改名同名文件名 </span><br>&gt; renamed <span class="hljs-string">&#x27;a.log&#x27;</span> -&gt; <span class="hljs-string">&#x27;b.log&#x27;</span> (backup: <span class="hljs-string">&#x27;b.log~&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="cp-copy"><a href="#cp-copy" class="headerlink" title="cp : copy"></a><a href="https://wangchujiang.com/linux-command/c/cp.html">cp</a> : copy</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> &lt;file|<span class="hljs-built_in">dir</span>&gt; &lt;file|<span class="hljs-built_in">dir</span>&gt;                      <span class="hljs-comment"># 复制黏贴重命名</span><br><br>$ <span class="hljs-built_in">cp</span> -v                                         <span class="hljs-comment"># --verbose 显示详细过程</span><br>$ <span class="hljs-built_in">cp</span> -f                                         <span class="hljs-comment"># --force 强制复制, 存在同名直接覆盖</span><br>$ <span class="hljs-built_in">cp</span> -r                                         <span class="hljs-comment"># -R, --recursive 递归复制</span><br>$ <span class="hljs-built_in">cp</span> -b                                         <span class="hljs-comment"># backup 存在同名文件时, 目标文件改名</span><br><br>$ <span class="hljs-built_in">cp</span> -l                                         <span class="hljs-comment"># --link 创建源文件的硬链接</span><br>$ <span class="hljs-built_in">cp</span> -s                                         <span class="hljs-comment"># --symbolic-link 创建源文件的符号链接</span><br><br>$ <span class="hljs-built_in">ln</span> &lt;file&gt; &lt;file&gt;                              <span class="hljs-comment"># 创建文件的硬链接</span><br>$ <span class="hljs-built_in">ln</span> -s &lt;file&gt; &lt;file&gt;                           <span class="hljs-comment"># --symbolic 创建文件的符号链接</span><br></code></pre></td></tr></table></figure><ul><li>硬链接: 一个数据绑定两个名字, 两名字都删除才无法访问数据</li><li>符号链接: 数据的”软链接” “快捷方式”, 只是一个链接, 不含数据</li></ul><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a><a href="https://wangchujiang.com/linux-command/c/find.html">find</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find &lt;<span class="hljs-built_in">dir</span>&gt; &lt;options&gt;                          <span class="hljs-comment"># 列出在 &lt;dir&gt; 下符合参数的文件或目录(绝对路径)</span><br><br>$ find ~/Desktop -name *.py                     <span class="hljs-comment"># 在 ~/Desktop 所有后缀为 .py 的文件</span><br>$ find . -path *lib*                            <span class="hljs-comment"># 在当前目录所有绝对地址中含有 &#x27;lib&#x27; 的文件或目录</span><br>$ find lib/ -regex <span class="hljs-string">&quot;.*\.txt$&quot;</span>                   <span class="hljs-comment"># lib 目录下符合正则表达式的文件</span><br><br>$ find &lt;<span class="hljs-built_in">dir</span>&gt; &lt;options&gt; -<span class="hljs-built_in">exec</span> &lt;cmd&gt; &#123;&#125; \;        <span class="hljs-comment"># 对查找到的文件进行操作</span><br>$ find . -name *.sh -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">rm</span> &#123;&#125; \;              <span class="hljs-comment"># 删除当前目录下后缀为 .sh 文件</span><br>$ find . -name *.py -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">mv</span> &#123;&#125; /tmp \;         <span class="hljs-comment"># 将当前目录下后缀为 .py 文件移动到 /tmp</span><br></code></pre></td></tr></table></figure><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a><a href="https://www.linuxcool.com/locate">locate</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ locate &lt;file|<span class="hljs-built_in">dir</span>&gt;                             <span class="hljs-comment"># 列出 / 目录下所有含 &lt;file|dir&gt; 的文件或目录</span><br><br>$ locate -c                                     <span class="hljs-comment"># --count 显示查找出的文件数量</span><br></code></pre></td></tr></table></figure><h3 id="文件查看-1"><a href="#文件查看-1" class="headerlink" title="文件查看"></a>文件查看</h3><h4 id="cat-concatenate"><a href="#cat-concatenate" class="headerlink" title="cat : concatenate"></a><a href="https://www.linuxcool.com/cat">cat</a> : concatenate</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> &lt;file&gt;                                    <span class="hljs-comment"># 读取并打印文件内容</span><br>$ <span class="hljs-built_in">cat</span> -n &lt;file&gt;                                 <span class="hljs-comment"># 打印文件内容并添加行数</span><br></code></pre></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a><a href="https://www.linuxcool.com/head">head</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">head</span> &lt;file&gt;                                   <span class="hljs-comment"># 显示文件的前 10 行</span><br>$ <span class="hljs-built_in">head</span> -n 5 &lt;file&gt;                              <span class="hljs-comment"># --lines 显示文件前 5 行</span><br>$ <span class="hljs-built_in">head</span> -c 20 &lt;file&gt;                             <span class="hljs-comment"># --bytes 显示文件前 20 个字符 </span><br></code></pre></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a><a href="https://www.linuxcool.com/tail">tail</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">tail</span> &lt;file&gt;                                   <span class="hljs-comment"># 显示文件的后 10 行</span><br>$ <span class="hljs-built_in">tail</span> -n 5 &lt;file&gt;                              <span class="hljs-comment"># --lines 显示文件后 5 行</span><br>$ <span class="hljs-built_in">tail</span> -c 20 &lt;file&gt;                             <span class="hljs-comment"># --bytes 显示文件最后 20 个字符 </span><br></code></pre></td></tr></table></figure><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="文本搜索"><a href="#文本搜索" class="headerlink" title="文本搜索"></a>文本搜索</h3><h4 id="grep-global-search-regular-expression-and-print-out-the-line"><a href="#grep-global-search-regular-expression-and-print-out-the-line" class="headerlink" title="grep : global search regular expression and print out the line"></a><a href="https://linux.alianga.com/c/grep.html">grep</a> : global search regular expression and print out the line</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep &lt;patten&gt; &lt;file&gt;                          <span class="hljs-comment"># 从文件中筛选出符合模式的行, 可搜索多个文件</span><br><br>$ grep -i                                       <span class="hljs-comment"># --ignore-case 忽略大小写</span><br>$ grep -E                                       <span class="hljs-comment"># --extend-regexp 使用正则匹配</span><br><br>$ grep -v                                       <span class="hljs-comment"># --revert-match 显示不匹配的所有行</span><br>$ grep -n                                       <span class="hljs-comment"># --line-number 同时显示行数</span><br><br>$ grep -c                                       <span class="hljs-comment"># --count 只显示匹配行的数量</span><br>$ grep -l                                       <span class="hljs-comment"># 查询多个文件, 仅显示包含的文件名</span><br><br>$ grep -w                                       <span class="hljs-comment"># --word-regexp 单词全匹配, 存在该单词的行, 不包含子字符串</span><br>$ grep -x                                       <span class="hljs-comment"># --line-regexp 行全匹配, 必须与行完全一致 </span><br></code></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="单词缩写"><a href="#单词缩写" class="headerlink" title="单词缩写"></a>单词缩写</h3><table><thead><tr><th align="center">缩写</th><th align="center">全称</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">h</td><td align="center"><code>help</code></td><td align="center">帮助</td></tr><tr><td align="center">a</td><td align="center"><code>all</code></td><td align="center">全部</td></tr><tr><td align="center">f</td><td align="center"><code>force</code></td><td align="center">强制</td></tr><tr><td align="center">i</td><td align="center"><code>interactive</code></td><td align="center">交互的</td></tr><tr><td align="center">b</td><td align="center"><code>backup</code></td><td align="center">备份</td></tr><tr><td align="center">v</td><td align="center"><code>version / verbose</code></td><td align="center">版本&#x2F;详细的</td></tr><tr><td align="center">c</td><td align="center"><code>count / command</code></td><td align="center">计数&#x2F;命令</td></tr><tr><td align="center">r &#x2F; R</td><td align="center"><code>recursive</code></td><td align="center">递归</td></tr><tr><td align="center">s &#x2F; S</td><td align="center"><code>sort</code></td><td align="center">排序</td></tr></tbody></table><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table><thead><tr><th align="center">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">&#96;</td><td align="left">&#96;</td></tr><tr><td align="center"><code>&gt;</code></td><td align="left">输出重定向, 覆盖</td></tr><tr><td align="center"><code>&gt;&gt;</code></td><td align="left">输出重定向, 追加</td></tr><tr><td align="center"><code>&amp;</code></td><td align="left">程序放入后台执行</td></tr><tr><td align="center"><code>#</code></td><td align="left">注释</td></tr><tr><td align="center"><code>&amp;&amp;</code></td><td align="left">且, 左边成功才执行右边</td></tr><tr><td align="center">&#96;</td><td align="left"></td></tr></tbody></table><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><table><thead><tr><th align="center">符号</th><th align="left">模式</th></tr></thead><tbody><tr><td align="center"><code>^</code></td><td align="left">锚定行首</td></tr><tr><td align="center"><code>$</code></td><td align="left">锚定行尾</td></tr><tr><td align="center"><code>()</code></td><td align="left">捆绑成一个整体</td></tr><tr><td align="center"><code>.</code></td><td align="left">任意一个字符</td></tr><tr><td align="center"><code>?</code></td><td align="left">前面字符或模式 0 或 1 次</td></tr><tr><td align="center"><code>&#123;m&#125;</code></td><td align="left">前面字符或模式 m 次</td></tr><tr><td align="center"><code>&#123;m, n&#125;</code></td><td align="left">前面字符或模式次数在 m n 之间</td></tr><tr><td align="center"><code>+</code></td><td align="left">前面字符或模式 1 次或多次</td></tr><tr><td align="center"><code>*</code></td><td align="left">前面字符或模式任意次</td></tr><tr><td align="center">&#96;</td><td align="left">&#96;</td></tr><tr><td align="center"><code>[]</code></td><td align="left">括号范围内均可</td></tr><tr><td align="center"><code>[^]</code></td><td align="left">括号范围之外均可</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 创建 github 博客</title>
    <link href="/2022/07/12/build-blog/"/>
    <url>/2022/07/12/build-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github-创建个人博客"><a href="#Hexo-Github-创建个人博客" class="headerlink" title="Hexo + Github 创建个人博客"></a>Hexo + Github 创建个人博客</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://hexo.io/zh-cn/">Hexo 官网</a></p><p>Markdown 文件 –&gt; Hexo 静态网页 –&gt; Github Page 页面</p><p>Hexo 是一个基于 JS 的博客框架, Hexo 可以解析 Markdown 生成静态网页<br>Github Page 为账户下的仓库提供免费的域名, 显示仓库的静态网页  </p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><table><thead><tr><th align="center">工具</th><th align="left">使用</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/">Github</a></td><td align="left">注册账户, 并添加 sshkey</td></tr><tr><td align="center"><a href="http://nodejs.cn/">node</a></td><td align="left">node 的包管理工具 npm 安装 Hexo 及主题</td></tr><tr><td align="center"><a href="https://git-scm.com/">Git</a></td><td align="left">本地代码上传到 github 的工具</td></tr><tr><td align="center"><a href="https://code.visualstudio.com/">VS Code</a></td><td align="left">编辑 Hexo 配置或markdown文件</td></tr></tbody></table><h2 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h2><ol><li>注册 github 账号, 设置 sshkey (浅谈 Git 中有介绍)</li><li>创建仓库, 仓库名固定为 <code>&lt;user&gt;.github.io</code> 如 <code>facser.github.io</code> (user 指账户名)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ https://&lt;user&gt;.github.io/          <span class="hljs-comment"># 使用该 url 确认是否创建成功</span><br></code></pre></td></tr></table></figure><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>创建文件夹用于保存 Hexo 文件(如在 D 盘创建 blog 文件夹)<br>安装 Vscode 编辑器, git 工具, node<br>使用 Vscode 打开 blog 文件夹, 命令行输入(快捷键: ctrl + ~)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git --version                  <span class="hljs-comment"># 查看 git 版本, 检查 git 是否安装成功</span><br>&gt; git version 2.27.0.windows.1<br><br>$ npm -v                         <span class="hljs-comment"># 查看 npm 版本, 检查 node 是否安装成功</span><br>&gt; 6.14.6<br></code></pre></td></tr></table></figure><p>安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli        <span class="hljs-comment"># 下载安装 hexo 所有的包</span><br>$ npm i hexo-deployer-git        <span class="hljs-comment"># 下载安装 hexo 的 git 专用包 </span><br></code></pre></td></tr></table></figure><p>注: 若无法下载 hexo 或速度较慢可修改 npm 源为国内镜像, 命令如下:<br><code>npm config set registry https://registry.npm.taobao.org/</code></p><h2 id="Hexo-本地"><a href="#Hexo-本地" class="headerlink" title="Hexo 本地"></a>Hexo 本地</h2><p>vscode 打开 blog 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init                      <span class="hljs-comment"># 生成初始化文件</span><br>$ hexo g                         <span class="hljs-comment"># 生成静态网页</span><br>$ hexo s                         <span class="hljs-comment"># 部署静态网页到本地预览</span><br></code></pre></td></tr></table></figure><p>注: <code>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</code><br>将 <code>http://localhost:4000/</code> 复制到浏览器打开即可预览</p><p>此时本地 blog 还未绑定 github 域名, 用的也是初始主题</p><h2 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h2><p><a href="https://hexo.io/zh-cn/docs/configuration">Hexo 网站参数</a></p><p>在目录下的 _config.yml 中配置网站信息</p><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="left">网站标题</td></tr><tr><td align="center">subtitle</td><td align="left">网站副标题</td></tr><tr><td align="center">description</td><td align="left">网站描述</td></tr><tr><td align="center">author</td><td align="left">您的名字</td></tr><tr><td align="center">language</td><td align="left">简中使用 zh-CN</td></tr><tr><td align="center">timezone</td><td align="left">网站时区</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">facser</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;facser blog&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">facser</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>注: 不填的选项, Hexo 会使用默认值</p><h2 id="Hexo-绑定-github"><a href="#Hexo-绑定-github" class="headerlink" title="Hexo 绑定 github"></a>Hexo 绑定 github</h2><p><a href="https://hexo.io/zh-cn/docs/github-pages">hexo 绑定私有 repo</a></p><p>编辑 blog 目录下 _config.yml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:facser/facser.http-github.io.git</span>  <span class="hljs-comment"># 仓库 url</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>                                         <span class="hljs-comment"># 代码分支</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">modify</span> <span class="hljs-string">git.md</span> <span class="hljs-string">another</span> <span class="hljs-string">time</span>                    <span class="hljs-comment"># commit 内容</span><br></code></pre></td></tr></table></figure><h2 id="Hexo-主题"><a href="#Hexo-主题" class="headerlink" title="Hexo 主题"></a>Hexo 主题</h2><p><a href="https://hexo.io/themes/">hexo 主题库</a></p><p>选择一款主题下载到本地, 将主题文件夹, 放入目录下的 themes 文件夹中<br>编辑 _config.yml, 找到 theme 选项, 替换为下载的主题文件夹名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">&lt;theme&gt;</span>               <span class="hljs-comment"># themes 文件夹下的主题</span><br></code></pre></td></tr></table></figure><h2 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h2><p><a href="https://hexo.io/zh-cn/docs/writing">Hexo 创建文章</a><br><a href="https://hexo.io/zh-cn/docs/front-matter">Hexo 添加属性</a></p><p>Vscode 打开 blog 文件夹, 命令行输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new post &lt;title&gt;       <span class="hljs-comment"># 创建文章, title 表示文章标题</span><br></code></pre></td></tr></table></figure><p>Hexo 会在 source&#x2F;_posts 创建 <code>&lt;title&gt;.md</code> 文件</p><p>文件生成后, 头部会带有 <code>title</code> 及 <code>data</code> 信息, 自行选择添加属性</p><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="left">文章大标题</td></tr><tr><td align="center">date</td><td align="left">文章创建时间</td></tr><tr><td align="center">tags</td><td align="left">文章标签</td></tr><tr><td align="center">categories</td><td align="left">文章分类</td></tr><tr><td align="center">excerpt</td><td align="left">文章摘要</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">浅谈</span> <span class="hljs-string">Git</span> <br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-07-10 21:08:54</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">tools</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">share</span>]<br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">git</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">git</span> <span class="hljs-string">配置及使用</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="Hexo-上传"><a href="#Hexo-上传" class="headerlink" title="Hexo 上传"></a>Hexo 上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean                  <span class="hljs-comment"># 清除原有的静态网页</span><br>$ hexo g                      <span class="hljs-comment"># generate  生成静态网页</span><br>$ hexo d                      <span class="hljs-comment"># 上传网页到 github 仓库</span><br></code></pre></td></tr></table></figure><p>注: 可使用 <code>hexo s</code> 命令进行本地预览</p>]]></content>
    
    
    <categories>
      
      <category>share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程设计及思考</title>
    <link href="/2022/07/12/design-pattern/"/>
    <url>/2022/07/12/design-pattern/</url>
    
    <content type="html"><![CDATA[<h1 id="代码设计和思考"><a href="#代码设计和思考" class="headerlink" title="代码设计和思考"></a>代码设计和思考</h1><p>如何写出高效优雅的代码？<br>如何设计代码逻辑？</p><hr><h2 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h2><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><ul><li>代码是否容易阅读, 注释是否详细</li><li>代码嵌套较少, 较为简单</li><li>模块划分是否合理</li></ul><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><ul><li>是否预留扩展空间</li><li>代码复用性强</li></ul><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul><li>是否易于修改 bug</li><li>是否易于添加或者修改代码</li><li>能应对多种异常</li></ul><h3 id="高效性"><a href="#高效性" class="headerlink" title="高效性"></a>高效性</h3><h2 id="面向过程-OP"><a href="#面向过程-OP" class="headerlink" title="面向过程 OP"></a>面向过程 OP</h2><blockquote><p>Procedural-Oriented Programming</p></blockquote><h2 id="面向对象-OOP"><a href="#面向对象-OOP" class="headerlink" title="面向对象 OOP"></a>面向对象 OOP</h2><blockquote><p>Object-oriented programming</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h2 id="SOLID-原则"><a href="#SOLID-原则" class="headerlink" title="SOLID 原则"></a>SOLID 原则</h2><p>SOLID 是面向对象编程应当遵守的准则和最佳的实践方向</p><ul><li>SRP 单一职责</li><li>OCP 开闭原则</li><li>LSP 里式替换原则</li><li>ISP 接口替换原则</li><li>DIP 依赖倒置原则</li></ul><h3 id="SRP-单一职责"><a href="#SRP-单一职责" class="headerlink" title="SRP 单一职责"></a>SRP 单一职责</h3><h4 id="原始定义"><a href="#原始定义" class="headerlink" title="原始定义"></a>原始定义</h4><blockquote><p>Single Responsibility Principle<br>There should never be more than one reason for a class to change</p></blockquote><p>译: 有且仅有一个原因引起类的变更, 简而言之, 一个类最好只负责一件事</p><p>SRP 原则在实际的重点在职责划分, 对于不同场景和需求来说, 职责的划分标准也不同.</p><h3 id="OCP-开闭原则"><a href="#OCP-开闭原则" class="headerlink" title="OCP 开闭原则"></a>OCP 开闭原则</h3><p>原始定义:</p><blockquote><p>Open Closed Principle</p></blockquote><h3 id="LSP-里式替换原则"><a href="#LSP-里式替换原则" class="headerlink" title="LSP 里式替换原则"></a>LSP 里式替换原则</h3><p>原始定义:</p><blockquote><p>Liskov Substitution Principle</p></blockquote><h3 id="ISP-接口替换原则"><a href="#ISP-接口替换原则" class="headerlink" title="ISP 接口替换原则"></a>ISP 接口替换原则</h3><p>原始定义:</p><blockquote><p>Interface Segregation Principle</p></blockquote><h3 id="DIP-依赖倒置原则"><a href="#DIP-依赖倒置原则" class="headerlink" title="DIP 依赖倒置原则"></a>DIP 依赖倒置原则</h3><p>原始定义:</p><blockquote><p>Dependency Inversion Principle</p></blockquote><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>创建一个自定义数据或者需要被复用的数据会对数据进行命名</p><h3 id="命名方式"><a href="#命名方式" class="headerlink" title="命名方式"></a>命名方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ErrorTestMessage            <span class="hljs-comment"># 大驼峰 大小写混用区分逻辑断点</span><br>errTestMsg                  <span class="hljs-comment"># 小驼峰</span><br><br>error_test_message          <span class="hljs-comment"># 蛇形命名  </span><br>err_test_msg  <br></code></pre></td></tr></table></figure><p>附录:<a href="#%E5%8F%98%E9%87%8F%E7%BC%A9%E5%86%99">变量缩写</a></p><h4 id="命名内容"><a href="#命名内容" class="headerlink" title="命名内容"></a>命名内容</h4><p>变量命名: 名词 形容词</p><ul><li>描述变量的意义</li><li>要强调的描述放在最后</li><li>命名形式一致</li></ul><p>布尔值常用前缀</p><table><thead><tr><th align="center">前缀</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">is_xx</td><td align="center">是不是</td></tr><tr><td align="center">has_xx</td><td align="center">有没有</td></tr><tr><td align="center">should_xx</td><td align="center">是否应该</td></tr><tr><td align="center">can_xx</td><td align="center">能不能</td></tr></tbody></table><p>强调的描述放后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">xx_count      <span class="hljs-comment"># xx 的数量</span><br>xx_length     <span class="hljs-comment"># xx 的长度</span><br>xx_id         <span class="hljs-comment"># xx 的 id</span><br>list_xx       <span class="hljs-comment"># xx 列表</span><br>dict_xx       <span class="hljs-comment"># xx 字典</span><br>int_xx        <span class="hljs-comment"># xx 数字</span><br></code></pre></td></tr></table></figure><p>函数: 动词 + 宾语</p><p>附录: <a href="#%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E5%8A%A8%E8%AF%8D">函数动词</a></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="提前结束"><a href="#提前结束" class="headerlink" title="提前结束"></a>提前结束</h3><ul><li>减少分支嵌套</li><li>用变量名对具体的值进行注释</li></ul><h3 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h3><ul><li>LBYL:  Look Before You Leap</li><li>EAFP: Easier to Ask for Forgiveness than Permission</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="变量缩写"><a href="#变量缩写" class="headerlink" title="变量缩写"></a>变量缩写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">addition              add               加<br>subtraction           sub               减<br>multiplication        mul               乘法<br>division              div               除法<br>hexadecimal           <span class="hljs-built_in">hex</span>               十六进制<br>array                 arr               数组、集合<br><span class="hljs-built_in">list</span>/<span class="hljs-type">Sequence</span>         lst/seq           列表 <br>dictionary            <span class="hljs-built_in">dict</span>              字典<br>character             char              字符<br>string                <span class="hljs-built_in">str</span>               字符串<br>text                  txt               文本<br>number                num               数量、编号<br>image                 img               图像<br>length                <span class="hljs-built_in">len</span>               长度<br>summation             <span class="hljs-built_in">sum</span>               和<br>average               avg               平均<br>maximum               <span class="hljs-built_in">max</span>               最大值<br>minimum               <span class="hljs-built_in">min</span>               最小值<br>middle                mid               中值<br>source                src               源头<br>address               addr              地址<br>previous              pre               前一个<br>current               cur               当前的<br>initalize             init              初始化<br>database              db                数据库<br>administrator         adm               管理员<br>password              pwd               密码<br>user                  usr               用户<br>directory             <span class="hljs-built_in">dir</span>               目录<br>document              doc               文档<br>library               lib               库<br>function              func              函数<br><span class="hljs-built_in">object</span>                obj               对象<br>argument              arg               实参<br>variable              var               变量<br>parameter             param             参数(形参)<br>execute               <span class="hljs-built_in">exec</span>              执行<br>command               cmd               命令<br>configuration         config            配置<br></code></pre></td></tr></table></figure><h3 id="函数常用动词"><a href="#函数常用动词" class="headerlink" title="函数常用动词"></a>函数常用动词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">添加/插入                      add、append、insert、<br>创建/初始化                    create、initialize、<br>加载/选择                      load、pick、select<br>删除/销毁                      delete、remove、destroy、drop<br>打开/启动                      <span class="hljs-built_in">open</span>、start<br>关闭/停止                      close、stop<br>获取/读取                      get、fetch、acquire、read、<br>查找/查询                      search、find、query<br>设置/重置                      <span class="hljs-built_in">set</span>、reset<br>放入/写入                      put、write、<br>释放/刷新                      release、refresh<br>发送/推送                      send、push<br>接收/拉取                      receive、pull<br>提交/取消                      submit、cancel<br>收集/采集                      collect、<br>提取/解析                      sub、extract、parse<br>编码/解码                      encode、decode<br>填充/压缩                      fill、pack、compress<br>清空/解压                      flush、clear、unpack、decompress<br>增加/减少                      increase、decrease、reduce<br>分隔/拼接                      split、join、concat<br>过滤/校验/检测                 <span class="hljs-built_in">filter</span>、valid、check<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Discuss</title>
    <link href="/2022/07/11/discuss/"/>
    <url>/2022/07/11/discuss/</url>
    
    <content type="html"><![CDATA[<h1 id="口嗨梦想家"><a href="#口嗨梦想家" class="headerlink" title="口嗨梦想家"></a>口嗨梦想家</h1><p>唠点啥吧……</p>]]></content>
    
    
    
    <tags>
      
      <tag>discuss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈 Git</title>
    <link href="/2022/07/10/git/"/>
    <url>/2022/07/10/git/</url>
    
    <content type="html"><![CDATA[<!-- * @FilePath: \Blog\facser_blog\source\_posts\git.md * @Author: facser * @Date: 2022-07-08 10:17:53 * @LastEditTime: 2022-07-16 15:32:43 * @LastEditors: facser * @Description: --><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>结合以下网站阅读分析, 体验更佳<br><a href="https://git-scm.com/book/zh/v2">Git 官方文档</a><br><a href="https://www.linuxcool.com/">linux 命令大全</a><br><a href="https://linux.utils.fun/">linux 搜索引擎</a></p><h2 id="Git-介绍"><a href="#Git-介绍" class="headerlink" title="Git 介绍"></a>Git 介绍</h2><blockquote><p>Git is a free and open source distributed version control system designed to<br>handle everything from small to very large projects with speed and efficiency</p></blockquote><p>Git 是一个开源的版本控制器, 常被用来作为代码的搬运工, 记录员, 时光机.</p><ul><li>搬运工: 可以把代码运输到指定位置保存</li><li>记录员: 记录代码和文件的改动</li><li>时光机: 回退代码到某一个记录过的状态</li></ul><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><h3 id="Git-官网"><a href="#Git-官网" class="headerlink" title="Git 官网"></a><a href="https://git-scm.com/">Git 官网</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git --version             <span class="hljs-comment"># 检查 git 是否安装</span><br>&gt; git version 1.8.3.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum install git           <span class="hljs-comment"># Centos Redhat 系统使用 yum 安装</span><br>$ sudo apt-get install git  <span class="hljs-comment"># Ubuntu Debian 系统使用 apt</span><br></code></pre></td></tr></table></figure><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="Git-配置分类"><a href="#Git-配置分类" class="headerlink" title="Git 配置分类"></a>Git 配置分类</h3><p>一个系统可以有多个用户, 每个用户可以创建多个代码仓库<br>由此 git 配置根据范围可以分为 <code>system</code>, <code>global</code>, <code>local</code> 3种<br>相同的设置项, 优先使用范围小的配置 <code>local</code> &gt; <code>global</code> &gt; <code>system</code></p><table><thead><tr><th align="center">leve</th><th align="center">file</th><th align="left">introduce</th></tr></thead><tbody><tr><td align="center">system</td><td align="center"><code>/etc/gitconfig</code></td><td align="left">系统上每一个用户及他们仓库的通用配置(不常用)</td></tr><tr><td align="center">global</td><td align="center"><code>~/.gitconfig</code></td><td align="left">当前系统用户, 这会对你系统上所有的仓库生效</td></tr><tr><td align="center">local</td><td align="center"><code>.git/config</code></td><td align="left">针对仓库, 在仓库内默认使用 local 配置</td></tr></tbody></table><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a><a href="https://git-scm.com/docs/git-config">git config</a></h3><blockquote><p>git-config - Get and set repository or global options</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --list --show-origin  <span class="hljs-comment"># 查看所有配置及所在的文件, 早期版本不支持</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --system --list      <span class="hljs-comment"># 查看系统的 git 配置</span><br>$ git config --global --list      <span class="hljs-comment"># 查看系统用户的 git 配置</span><br>$ git config --<span class="hljs-built_in">local</span> --list       <span class="hljs-comment"># 查看当前库的 git 配置</span><br>$ git config --list               <span class="hljs-comment"># 列出上述所有配置, 可能出现重复项</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config &lt;key&gt;                <span class="hljs-comment"># 查看某项配置的值 </span><br><br>$ git config user.name            <span class="hljs-comment"># 查看当前用户名</span><br>&gt; facser<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;&lt;user.name&gt;&quot;</span>   <span class="hljs-comment"># 设置系统用户的用户名</span><br>$ git config --global user.email <span class="hljs-string">&quot;&lt;mail&gt;&quot;</span>       <span class="hljs-comment"># 设置系统用户邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --<span class="hljs-built_in">local</span> user.name <span class="hljs-string">&quot;&lt;user.name&gt;&quot;</span>    <span class="hljs-comment"># 设置仓库用户名</span><br>$ git config --<span class="hljs-built_in">local</span> user.email <span class="hljs-string">&quot;&lt;mail&gt;&quot;</span>        <span class="hljs-comment"># 设置仓库用户邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config -e                                 <span class="hljs-comment"># 编辑配置文件</span><br>$ git config --global core.editor vim           <span class="hljs-comment"># 设置编辑器</span><br>$ git config --global commit.template &lt;file&gt;    <span class="hljs-comment"># 设置 commit 模板</span><br></code></pre></td></tr></table></figure><h2 id="Git-仓库"><a href="#Git-仓库" class="headerlink" title="Git 仓库"></a>Git 仓库</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><table><thead><tr><th align="center">区域</th><th align="center">位置</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">本地仓库</td><td align="center">本地</td><td align="center">记录文件当前状态生成一个版本并保存至本地仓库</td></tr><tr><td align="center">远程仓库</td><td align="center">代码托管网站</td><td align="center">将当前记录的版本上传到远程仓库</td></tr></tbody></table><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p>创建本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init   <span class="hljs-comment"># 在当前目录创建.git 子目录(包含仓库所有 git 文件与版本数据)</span><br></code></pre></td></tr></table></figure><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><a href="https://git-scm.com/docs/git-status">git status</a></h3><blockquote><p>git-status - Show the working tree status</p></blockquote><ul><li>Untracked</li><li>Changes not staged for commit</li><li>Changes to be committed</li></ul><p>工作区 – <code>git add</code> –&gt; 暂存区 – <code>git commit</code> –&gt; 本地仓库</p><p>git 用一下3种描述表示<strong>文件状态</strong>, 进一步可划分为<strong>未追踪</strong>和<strong>已追踪</strong></p><table><thead><tr><th align="center">区域</th><th align="center">描述</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">Untracked</td><td align="center">新增文件</td><td align="center">工作区, 未被追踪</td></tr><tr><td align="center">Changes not staged for commit</td><td align="center">有新修改的文件</td><td align="center">工作区, 新修改未被追踪</td></tr><tr><td align="center">Changes to be committed</td><td align="center">无修改的文件</td><td align="center">暂存区, 修改已追踪</td></tr></tbody></table><p>当一个文件通过 <code>git add</code> 追踪后, 又修改了, 此时查看 <code>git status</code> 会如何显示？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>&gt;Your branch is up to date with &#x27;origin/main&#x27;.<br>&gt;<br>&gt;Changes to be committed:                <br>&gt;        modified:   README.md           <br>&gt;        modified:   git.md             # git.md 已被追踪, 保存的是已追踪时内容<br>&gt;<br>&gt;Changes not staged for commit:          <br>&gt;        modified:   git.md             # 新修改未被追踪<br></code></pre></td></tr></table></figure><p>通过过上面结果可知, 只要文件存在未被追踪的内容就会归入到工作区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status -s           # -s --short 显示简略信息<br>&gt; M  README               # 表示该文件已 add 和 commit, 未再修改<br>&gt; A  lib/git.rb           # 从未 commit 但已 add, 未再修改<br>&gt; MM Rakefile             # 已 commit 的文件, 最新的修改未 add<br>&gt; MD temp.txt             # commit 过, 当前已删除, 未 add 记录删除 <br>&gt; AM lib/git.md           # 从未 commit 但 add 过, 最新修改未 add<br>&gt; ?? LICENSE.txt          # 未 add 未追踪的文件<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">缩写</th><th align="left">位置</th><th align="center">详细</th></tr></thead><tbody><tr><td align="left">??</td><td align="left">工作区</td><td align="center">新增文件, 从未被追踪</td></tr><tr><td align="left">AM</td><td align="left">工作区、暂存区</td><td align="center">未进入过本地仓库</td></tr><tr><td align="left">MM</td><td align="left">工作区、暂存区</td><td align="center">进入过仓库</td></tr><tr><td align="left">MD</td><td align="left">暂存区</td><td align="center">进入过仓库</td></tr><tr><td align="left">A</td><td align="left">暂存区</td><td align="center">未进入本地仓库</td></tr><tr><td align="left">M</td><td align="left">暂存区</td><td align="center">进入过本地仓库</td></tr></tbody></table><p>右边有字母表示有修改未追踪, 在工作区显示(删除文件不显示)<br>左边有字母表示已追踪, 无修改, M 表示 commit 过, A 表示未 commit 过</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><a href="https://git-scm.com/docs/git-add">git add</a></h3><blockquote><p>git-add - Add file contents to the index</p></blockquote><p>追踪文件或修改, add 之后文件会进入暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add &lt;file&gt;          <span class="hljs-comment"># 记录指定文件修改</span><br>$ git add .               <span class="hljs-comment"># 记录当前目录下所有文件修改(上层文件未记录)</span><br>$ git add --all           <span class="hljs-comment"># 记录当前项目所有文件修改(推荐)</span><br></code></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><a href="https://git-scm.com/docs/git-diff">git diff</a></h3><blockquote><p>git-diff - Show changes between commits, commit and working tree, etc</p></blockquote><p>未被追踪和已追踪内容进行比对, 已被追踪则不比对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git diff<br>&gt; diff --git a/test.log b/test.log    <span class="hljs-comment"># 比对 test.log 文件两个状态</span><br>&gt; index 61e2b58..9b6b46c 100644<br>&gt; --- a/test.log                      <span class="hljs-comment"># - 开头是被追踪的内容</span><br>&gt; +++ b/test.log                      <span class="hljs-comment"># + 开头是未被追踪的内容</span><br>&gt; @@ -1 +1,1 @@<br>&gt; -git add once                       <span class="hljs-comment"># 修改前是 git add once</span><br>&gt; \ No newline at end of file<br>&gt; +before second add run git diff     <span class="hljs-comment"># 修改后变成 before second add run git diff</span><br>&gt; \ No newline at end of file<br></code></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><a href="https://git-scm.com/docs/git-commit">git commit</a></h3><blockquote><p>git-commit - Record changes to the repository</p></blockquote><p>通过已追踪的内容生成一个版本放入本地仓库(.git)<br>每 commit 一次便生成了一个可以回退的版本, 即回溯的点<br>commit 时可以添加代码改动信息便于回退时进行定位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>    <span class="hljs-comment"># message 较短可直接填写</span><br>$ git commit -s                       <span class="hljs-comment"># message 较长, 使用默认编辑器编辑 commit</span><br>$ git commit --amend                  <span class="hljs-comment"># 在上次 commit 基础上修改, 并替换原来的 commit</span><br>$ git commit --amend --no-edit        <span class="hljs-comment"># 使用上次 commit 且不修改, 即本次 commit 和上次合并</span><br><br>$ git checkout -- &lt;file&gt;              <span class="hljs-comment"># 撤销工作区的修改, 回到上次 commit 状态</span><br></code></pre></td></tr></table></figure><p>注: 可通过 <code>git config --global core.editor vim</code> 修改编辑器为 <code>vim</code></p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><a href="https://git-scm.com/docs/git-log">git log</a></h3><blockquote><p>git-log - Show commit logs</p></blockquote><p>查看各 commit 版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span>                     <span class="hljs-comment"># 显示所有 commit 的版本的详细信息</span><br>$ git <span class="hljs-built_in">log</span> --pretty=oneline    <span class="hljs-comment"># 显示 commit 版本的简略信息</span><br></code></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><a href="https://git-scm.com/docs/git-reset">git reset</a></h3><blockquote><p>git-reset - Reset current HEAD to the specified state</p></blockquote><p>通过 <code>git log</code> 定位回退的版本, 使用 <code>git reset</code> 执行回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard HEAD^                 <span class="hljs-comment"># 回退到上个版本</span><br>$ git reset --hard HEAD &lt;commit number&gt;  <span class="hljs-comment"># 回到指定 commit 版本</span><br></code></pre></td></tr></table></figure><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>远程仓库是托管在网上的项目版本库, 需要在代码平台上创建, 常见的如</p><ul><li><a href="https://github.com/">Github</a></li><li><a href="https://about.gitlab.com/">Gitlab</a></li><li><a href="https://gitee.com/">Gitee</a></li></ul><p>可以通过两种方式添加远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;Repository url&gt;    <span class="hljs-comment"># 克隆远端仓库到本地, 自动绑定链接对应的仓库</span><br><br>$ git remote -v                 <span class="hljs-comment"># 查看本地仓库关联的所有远端仓库</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init                                  <span class="hljs-comment"># 初始化本地仓库</span><br>$ git add --all                             <span class="hljs-comment"># 追踪目录下所有文件修改</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>          <span class="hljs-comment"># 记录修改生成一个版本到本地仓库</span><br>$ git remote origin add &lt;Repository url&gt;    <span class="hljs-comment"># 将远程仓库命名为 origin 并关联本地仓库</span><br>$ git push -u orighin master                <span class="hljs-comment"># 推送本地所有版本到远程仓库</span><br></code></pre></td></tr></table></figure><ul><li>一个本地仓库可以关联多个远程仓库</li><li>本地仓库可以提交代码到任意一个已关联的远程仓库</li><li>使用克隆后, 该远程仓库默认被命名为 origin</li></ul><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><a href="https://git-scm.com/docs/git-push">git push</a></h3><blockquote><p>git-push - Update remote refs along with associated objects</p></blockquote><p>将本地所有新增的 commit 推送到远端仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push origin master     <span class="hljs-comment"># 提交所有 commit 到 origin 仓库的 master 分支</span><br>$ git push -u origin master  <span class="hljs-comment"># 将 origin 仓库 master 分支作为拉取和推送的默认值</span><br><br>$ git push &lt;repo&gt; &lt;branch&gt;   <span class="hljs-comment"># 使用过 -u 后可以省略仓库和分支</span><br></code></pre></td></tr></table></figure><h2 id="常规流程"><a href="#常规流程" class="headerlink" title="常规流程"></a>常规流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;repo url&gt;                <span class="hljs-comment"># 克隆远端仓库到本地</span><br>$ git add --all                       <span class="hljs-comment"># 修改完后, 记录所有修改</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>    <span class="hljs-comment"># 推送到本地仓库</span><br>$ git push -u origin master           <span class="hljs-comment"># 将本地版本提交到远端仓库</span><br><br>$ git commit -a -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span> <span class="hljs-comment"># 同时记录修改并推送到本地仓库</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是从主线延伸出<strong>同源</strong>的备份, 分支可以随意修改操作而不影响主线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch                     <span class="hljs-comment"># 查看所有分支及当前分支所处</span><br>&gt; * master<br>&gt;   fluid<br><br>$ git branch &lt;branch name&gt;       <span class="hljs-comment"># 创建一个分支</span><br><br>$ git checkout &lt;branch name&gt;     <span class="hljs-comment"># 跳转到&lt;branch name&gt;分支</span><br>$ git checkout -b &lt;branch name&gt;  <span class="hljs-comment"># 创建分支并跳转到该分支 </span><br></code></pre></td></tr></table></figure><p>当想要将分支代码并入到主线时, 使用 <code>git checkout</code> 跳转到<strong>主线</strong><br>再使用 <code>git merge &lt;branch name&gt;</code> 便可以将指定分支合并到主线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch                  <span class="hljs-comment"># 确认当前分支是否为主线</span><br>$ git merge &lt;branch name&gt;     <span class="hljs-comment"># 将 &lt;branch name&gt; 分支合并到当前所处分支</span><br></code></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>忽略指定文件, 不对其追踪和提交, 文件名固定为 <code>.gitignore</code>, 项目内可创建<strong>多个</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> .gitignore<br>&gt; *.pyc              <span class="hljs-comment"># 忽略当前项目内所有 .pyc 结尾的文件</span><br>&gt; !main.pyc          <span class="hljs-comment"># 强制跟踪所有 main.pyc</span><br>&gt; /*.<span class="hljs-built_in">log</span>             <span class="hljs-comment"># 忽略当前目录下 .log 结尾文件, 不影响上层的文件</span><br>&gt; temp/              <span class="hljs-comment"># 忽略整个项目内所有 temp 文件夹</span><br>&gt; /lib/*.pyc         <span class="hljs-comment"># 忽略当前 lib 目录 下一级的 pyc 文件, lib 下多层目录不受影响  </span><br>&gt; lib/**/.pyc        <span class="hljs-comment"># 忽略项目内所有 lib 文件夹内的 pyc 文件</span><br></code></pre></td></tr></table></figure><h2 id="SSH-key-密钥"><a href="#SSH-key-密钥" class="headerlink" title="SSH key 密钥"></a>SSH key 密钥</h2><p>本地仓库推送代码到远端时, git 会要求用户输入用户名和密码, 设置 ssh key 即可<strong>免密码</strong>推送</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><table><thead><tr><th align="center">密钥</th><th align="center">linux</th><th align="center">windows</th></tr></thead><tbody><tr><td align="center">id_rsa (私钥)</td><td align="center"><code>/root/.ssh/id_rsa</code></td><td align="center"><code>C:\Users\&lt;user&gt;\.ssh</code></td></tr><tr><td align="center">id_rsa.pub (公钥)</td><td align="center"><code>/root/.ssh/id_rsa.pub</code></td><td align="center"><code>C:\Users\&lt;user&gt;\.ssh</code></td></tr></tbody></table><p>生成两个密钥文件, 将公钥放到代码托管平台的账号设置中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen                             <span class="hljs-comment"># 自动生成密钥</span><br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;&lt;user.mail&gt;&quot;</span>     <span class="hljs-comment"># 生成 rsa 类型带邮箱注释信息的密钥</span><br></code></pre></td></tr></table></figure><ul><li>密钥由系统生成, 放入用户设置, 所以是系统和账户绑定</li><li>系统下的本地仓库推送代码到该账户使用 ssh 链接时即可免密</li></ul>]]></content>
    
    
    <categories>
      
      <category>share</category>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
