<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 创建 github 博客</title>
    <link href="/2022/07/12/build-blog/"/>
    <url>/2022/07/12/build-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github-创建个人博客"><a href="#Hexo-Github-创建个人博客" class="headerlink" title="Hexo + Github 创建个人博客"></a>Hexo + Github 创建个人博客</h1><p>通过 hexo 生成静态网页上传到 github 仓库, 将该仓库设置为个人 github page<br>主页, Github 会自动将该仓库的文件设置成公共站点网页</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><a href="https://github.com/">Github 账户</a> : 创建个人博客的代码仓区</li><li><a href="http://nodejs.cn/">npm</a> : 下载 hexo 及 hexo 主题</li><li><a href="https://git-scm.com/">git</a> : 代码上传</li></ul><h2 id="施工中-…"><a href="#施工中-…" class="headerlink" title="施工中 …"></a>施工中 …</h2>]]></content>
    
    
    <categories>
      
      <category>share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程设计及思考</title>
    <link href="/2022/07/12/design-pattern/"/>
    <url>/2022/07/12/design-pattern/</url>
    
    <content type="html"><![CDATA[<h1 id="代码设计和思考"><a href="#代码设计和思考" class="headerlink" title="代码设计和思考"></a>代码设计和思考</h1><blockquote><p>如何写出高效优雅的代码？<br>如何设计代码逻辑？</p></blockquote><h2 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h2><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><ul><li>代码是否容易阅读, 注释是否详细</li><li>代码嵌套较少, 较为简单</li><li>模块划分是否合理</li></ul><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><ul><li>是否预留扩展空间</li><li>代码复用性强</li></ul><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul><li>是否易于修改 bug</li><li>是否易于添加或者修改代码</li><li>能应对多种异常</li></ul><h2 id="SOLID-原则"><a href="#SOLID-原则" class="headerlink" title="SOLID 原则"></a>SOLID 原则</h2><p>SOLID 是面向对象编程应当遵守的准则和最佳的实践方向</p><ul><li>SRP 单一职责</li><li>OCP 开闭原则</li><li>LSP 里式替换原则</li><li>ISP 接口替换原则</li><li>DIP 依赖倒置原则</li></ul><h3 id="SRP-单一职责"><a href="#SRP-单一职责" class="headerlink" title="SRP 单一职责"></a>SRP 单一职责</h3><h4 id="原始定义"><a href="#原始定义" class="headerlink" title="原始定义"></a>原始定义</h4><blockquote><p>Single Responsibility Principle<br>There should never be more than one reason for a class to change</p></blockquote><p>译: 有且仅有一个原因引起类的变更, 简而言之, 一个类最好只负责一件事</p><h4 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h4><p>实际开发时, 工程师在接到任务需求时, 会先划分流程, 每个流程定义一定数量的类作为工具来完成各个<br>流程的操作. 对于不同的人来说, 每个流程类的划分都有各自想法. 怎么划分更为合适就是成了一个问题.</p><p>一般工程师拆分时都会将相近的职责, 类似的功能放在一起. 当工程师在使用或者需求变更时发现一个类的   职责过多, 方法多, 类方法参数多, 修改其代码时候容易影响其它地方, 这时候就需要考虑对该类拆分</p><p>SRP 原则在实际的重点在职责划分, 对于不同场景和需求来说, 职责的划分标准也不同.</p><h2 id="施工中-…"><a href="#施工中-…" class="headerlink" title="施工中 …"></a>施工中 …</h2><h3 id="OCP-开闭原则"><a href="#OCP-开闭原则" class="headerlink" title="OCP 开闭原则"></a>OCP 开闭原则</h3><p>原始定义:</p><blockquote><p>Open Closed Principle</p></blockquote><h3 id="LSP-里式替换原则"><a href="#LSP-里式替换原则" class="headerlink" title="LSP 里式替换原则"></a>LSP 里式替换原则</h3><p>原始定义:</p><blockquote><p>Liskov Substitution Principle</p></blockquote><h3 id="ISP-接口替换原则"><a href="#ISP-接口替换原则" class="headerlink" title="ISP 接口替换原则"></a>ISP 接口替换原则</h3><p>原始定义:</p><blockquote><p>Interface Segregation Principle</p></blockquote><h3 id="DIP-依赖倒置原则"><a href="#DIP-依赖倒置原则" class="headerlink" title="DIP 依赖倒置原则"></a>DIP 依赖倒置原则</h3><p>原始定义:</p><blockquote><p>Dependency Inversion Principle</p></blockquote><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="命名格式规范"><a href="#命名格式规范" class="headerlink" title="命名格式规范"></a>命名格式规范</h3><p> 驼峰法 : 大小写混用来区分逻辑断点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ErrorTestMessage            <span class="hljs-comment"># 大驼峰</span><br>errTestMsg                  <span class="hljs-comment"># 小驼峰</span><br></code></pre></td></tr></table></figure><p>蛇形命名: 通过 “_” 来连接逻辑断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">error_test_message            <br>err_test_msg                  <br></code></pre></td></tr></table></figure><p>附录查看常用变量缩写</p><h4 id="命名内容"><a href="#命名内容" class="headerlink" title="命名内容"></a>命名内容</h4><ul><li>描述变量的意义</li><li>要强调的描述放在最后</li><li>命名形式一致<br>函数: 动词 + 宾语</li></ul><p>变量: 名词 &#x2F; 名词 + 形容词  &#x2F; 形容词 + 名词</p><p>布尔变量命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">is_xx         <span class="hljs-comment"># 是不是</span><br>has_xx        <span class="hljs-comment"># 有没有</span><br>should_xx     <span class="hljs-comment"># 要不要</span><br>can_xx        <span class="hljs-comment"># 能不能</span><br></code></pre></td></tr></table></figure><p>强调的描述放后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">xx_count      <span class="hljs-comment"># xx 的数量</span><br>xx_length     <span class="hljs-comment"># xx 的长度</span><br>xx_id         <span class="hljs-comment"># xx 的 id</span><br>list_xx       <span class="hljs-comment"># xx 列表</span><br>dict_xx       <span class="hljs-comment"># xx 字典</span><br>int_xx        <span class="hljs-comment"># xx 数字</span><br></code></pre></td></tr></table></figure><p>附录查看函数常用动词查看附录</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="提前结束"><a href="#提前结束" class="headerlink" title="提前结束"></a>提前结束</h4><ul><li>减少分支嵌套</li><li>用变量来注释具体的值</li></ul><h4 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h4><ul><li>LBYL:  Look Before You Leap</li><li>EAFP: Easier to Ask for Forgiveness than Permission</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多分支嵌套, 多个条件成立后才执行</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list_index</span>(<span class="hljs-params">value, lst</span>):<br>    <span class="hljs-keyword">if</span> instance(lst, <span class="hljs-built_in">list</span>):<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">in</span> lst:<br>            <span class="hljs-keyword">return</span> lst.index(value)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;value not in lst&#x27;</span>)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lst type error&#x27;</span>)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br> <br><span class="hljs-comment"># 提前结束, 不符合直接退出</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list_index</span>(<span class="hljs-params">value, lst</span>):<br>    type_err = -<span class="hljs-number">1</span> <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> instance(lst, <span class="hljs-built_in">list</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;lst type error&#x27;</span>)<br>        <span class="hljs-keyword">return</span> type_err <br>        <br>    value_err = -<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span>  value <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lst:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;value not in lst&#x27;</span>)<br>        <span class="hljs-keyword">return</span> value_err <br>        <br>    <span class="hljs-keyword">return</span> lst.index(value)<br><br><span class="hljs-comment"># 先使用, 报错了再解决</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list_index</span>(<span class="hljs-params">value, lst</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> lst.index(value)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err:<br>        type_value_err = -<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(err)<br>        <span class="hljs-keyword">return</span> type_value_err <br></code></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="变量缩写"><a href="#变量缩写" class="headerlink" title="变量缩写"></a>变量缩写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">addition              add               加<br>subtraction           sub               减<br>multiplication        mul               乘法<br>division              div               除法<br>hexadecimal           <span class="hljs-built_in">hex</span>               十六进制<br>array                 arr               数组、集合<br><span class="hljs-built_in">list</span>/<span class="hljs-type">Sequence</span>         lst/seq           列表 <br>dictionary            <span class="hljs-built_in">dict</span>              字典<br>character             char              字符<br>string                <span class="hljs-built_in">str</span>               字符串<br>text                  txt               文本<br>number                num               数量、编号<br>image                 img               图像<br>length                <span class="hljs-built_in">len</span>               长度<br>summation             <span class="hljs-built_in">sum</span>               和<br>average               avg               平均<br>maximum               <span class="hljs-built_in">max</span>               最大值<br>minimum               <span class="hljs-built_in">min</span>               最小值<br>middle                mid               中值<br>source                src               源头<br>address               addr              地址<br>previous              pre               前一个<br>current               cur               当前的<br>initalize             init              初始化<br>database              db                数据库<br>administrator         adm               管理员<br>password              pwd               密码<br>user                  usr               用户<br>directory             <span class="hljs-built_in">dir</span>               目录<br>document              doc               文档<br>library               lib               库<br>function              func              函数<br><span class="hljs-built_in">object</span>                obj               对象<br>argument              arg               实参<br>variable              var               变量<br>parameter             param             参数(形参)<br>execute               <span class="hljs-built_in">exec</span>              执行<br>command               cmd               命令<br>configuration         config            配置<br></code></pre></td></tr></table></figure><h4 id="函数常用动词"><a href="#函数常用动词" class="headerlink" title="函数常用动词"></a>函数常用动词</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">查找/查询                       search、find、query<br>发送/推送                       send、push<br>接收/拉取                       receive、pull<br>删除/销毁                       delete、remove、destroy、drop<br>关闭/停止                       close、stop<br>提取/解析                       sub、extract、parse<br>编码/解码                       encode、decode<br>增加/减少                       increase、decrease、reduce<br>分隔/拼接                       split、join、concat<br>收集/选择                       collect、pick、select<br>获取/读取                       get、fetch、acquire、read、<br>设置/重置                       <span class="hljs-built_in">set</span>、reset、<br>放入/写入                       put、write、<br>释放/刷新                       release、refresh<br>初始化/加载                     initialize、load<br>添加/插入/创建                  add、append、insert、create、<br>打开/开始/启动                  <span class="hljs-built_in">open</span>、start<br>填充/打包/压缩                  fill、pack、compress<br>清空/拆包/解压                  flush、clear、unpack、decompress<br>过滤/校验/检测                  <span class="hljs-built_in">filter</span>、valid、check<br>提交/撤销/取消                  submit、cancel<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Discuss</title>
    <link href="/2022/07/11/discuss/"/>
    <url>/2022/07/11/discuss/</url>
    
    <content type="html"><![CDATA[<h1 id="口嗨梦想家"><a href="#口嗨梦想家" class="headerlink" title="口嗨梦想家"></a>口嗨梦想家</h1><p>唠点啥吧……</p>]]></content>
    
    
    
    <tags>
      
      <tag>discuss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈 Git</title>
    <link href="/2022/07/10/git/"/>
    <url>/2022/07/10/git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>结合以下网站阅读分析, 体验更佳<br><a href="https://git-scm.com/book/zh/v2">Git 官方文档</a><br><a href="https://www.linuxcool.com/">linux 命令大全</a><br><a href="https://linux.utils.fun/">linux 搜索引擎</a></p><h2 id="Git-介绍"><a href="#Git-介绍" class="headerlink" title="Git 介绍"></a>Git 介绍</h2><blockquote><p>Git is a free and open source distributed version control system designed to<br>handle everything from small to very large projects with speed and efficiency</p></blockquote><p>Git 是一个开源的版本控制器, 常被用来作为代码的搬运工, 记录员, 时光机.</p><ul><li>搬运工: 可以把代码运输到指定位置保存</li><li>记录员: 记录代码和文件的改动</li><li>时光机: 回退代码到某一个记录过的状态</li></ul><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><h3 id="Git-官网"><a href="#Git-官网" class="headerlink" title="Git 官网"></a><a href="https://git-scm.com/">Git 官网</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git --version             <span class="hljs-comment"># 检查 git 是否安装</span><br>&gt; git version 1.8.3.1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum install git           <span class="hljs-comment"># Centos Redhat 系统使用 yum 安装</span><br>$ sudo apt-get install git  <span class="hljs-comment"># Ubuntu Debian 系统使用 apt</span><br></code></pre></td></tr></table></figure><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="Git-配置分类"><a href="#Git-配置分类" class="headerlink" title="Git 配置分类"></a>Git 配置分类</h3><p>一个系统可以有多个用户, 每个用户可以创建多个代码仓库<br>由此 git 配置根据范围可以分为 <code>system</code>, <code>global</code>, <code>local</code> 3种<br>相同的设置项, 优先使用范围小的配置 <code>local</code> &gt; <code>global</code> &gt; <code>system</code></p><table><thead><tr><th align="center">leve</th><th align="center">file</th><th align="left">introduce</th></tr></thead><tbody><tr><td align="center">system</td><td align="center"><code>/etc/gitconfig</code></td><td align="left">系统上每一个用户及他们仓库的通用配置(不常用)</td></tr><tr><td align="center">global</td><td align="center"><code>~/.gitconfig</code></td><td align="left">当前系统用户, 这会对你系统上所有的仓库生效</td></tr><tr><td align="center">local</td><td align="center"><code>.git/config</code></td><td align="left">针对仓库, 在仓库内默认使用 local 配置</td></tr></tbody></table><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a><a href="https://git-scm.com/docs/git-config">git config</a></h3><blockquote><p>git-config - Get and set repository or global options</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --list --show-origin  <span class="hljs-comment"># 查看所有配置及所在的文件, 早期版本不支持</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --system --list      <span class="hljs-comment"># 查看系统的 git 配置</span><br>$ git config --global --list      <span class="hljs-comment"># 查看系统用户的 git 配置</span><br>$ git config --<span class="hljs-built_in">local</span> --list       <span class="hljs-comment"># 查看当前库的 git 配置</span><br>$ git config --list               <span class="hljs-comment"># 列出上述所有配置, 可能出现重复项</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config &lt;key&gt;                <span class="hljs-comment"># 查看某项配置的值 </span><br><br>$ git config user.name            <span class="hljs-comment"># 查看当前用户名</span><br>&gt; facser<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;&lt;user.name&gt;&quot;</span>   <span class="hljs-comment"># 设置系统用户的用户名</span><br>$ git config --global user.email <span class="hljs-string">&quot;&lt;mail&gt;&quot;</span>       <span class="hljs-comment"># 设置系统用户邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --<span class="hljs-built_in">local</span> user.name <span class="hljs-string">&quot;&lt;user.name&gt;&quot;</span>    <span class="hljs-comment"># 设置仓库用户名</span><br>$ git config --<span class="hljs-built_in">local</span> user.email <span class="hljs-string">&quot;&lt;mail&gt;&quot;</span>        <span class="hljs-comment"># 设置仓库用户邮箱</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config -e                                 <span class="hljs-comment"># 编辑配置文件</span><br>$ git config --global core.editor vim           <span class="hljs-comment"># 设置编辑器</span><br>$ git config --global commit.template &lt;file&gt;    <span class="hljs-comment"># 设置 commit 模板</span><br></code></pre></td></tr></table></figure><h2 id="Git-仓库"><a href="#Git-仓库" class="headerlink" title="Git 仓库"></a>Git 仓库</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><table><thead><tr><th align="center">区域</th><th align="center">位置</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">本地仓库</td><td align="center">本地</td><td align="center">记录文件当前状态生成一个版本并保存至本地仓库</td></tr><tr><td align="center">远程仓库</td><td align="center">代码托管网站</td><td align="center">将当前记录的版本上传到远程仓库</td></tr></tbody></table><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p>创建本地仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init   <span class="hljs-comment"># 在当前目录创建.git 子目录(包含仓库所有 git 文件与版本数据)</span><br></code></pre></td></tr></table></figure><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><a href="https://git-scm.com/docs/git-status">git status</a></h3><blockquote><p>git-status - Show the working tree status</p></blockquote><ul><li>Untracked</li><li>Changes not staged for commit</li><li>Changes to be committed</li></ul><p>工作区 – <code>git add</code> –&gt; 暂存区 – <code>git commit</code> –&gt; 本地仓库</p><p>git 用一下3种描述表示<strong>文件状态</strong>, 进一步可划分为<strong>未追踪</strong>和<strong>已追踪</strong></p><table><thead><tr><th align="center">区域</th><th align="center">描述</th><th align="center">状态</th></tr></thead><tbody><tr><td align="center">Untracked</td><td align="center">新增文件</td><td align="center">工作区, 未被追踪</td></tr><tr><td align="center">Changes not staged for commit</td><td align="center">有新修改的文件</td><td align="center">工作区, 新修改未被追踪</td></tr><tr><td align="center">Changes to be committed</td><td align="center">无修改的文件</td><td align="center">暂存区, 修改已追踪</td></tr></tbody></table><p>当一个文件通过 <code>git add</code> 追踪后, 又修改了, 此时查看 <code>git status</code> 会如何显示？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>&gt;Your branch is up to date with &#x27;origin/main&#x27;.<br>&gt;<br>&gt;Changes to be committed:                <br>&gt;        modified:   README.md           <br>&gt;        modified:   git.md             # git.md 已被追踪, 保存的是已追踪时内容<br>&gt;<br>&gt;Changes not staged for commit:          <br>&gt;        modified:   git.md             # 新修改未被追踪<br></code></pre></td></tr></table></figure><p>通过过上面结果可知, 只要文件存在未被追踪的内容就会归入到工作区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status -s           # -s --short 显示简略信息<br>&gt; M  README               # 表示该文件已 add 和 commit, 未再修改<br>&gt; A  lib/git.rb           # 从未 commit 但已 add, 未再修改<br>&gt; MM Rakefile             # 已 commit 的文件, 最新的修改未 add<br>&gt; MD temp.txt             # commit 过, 当前已删除, 未 add 记录删除 <br>&gt; AM lib/git.md           # 从未 commit 但 add 过, 最新修改未 add<br>&gt; ?? LICENSE.txt          # 未 add 未追踪的文件<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">缩写</th><th align="left">位置</th><th align="center">详细</th></tr></thead><tbody><tr><td align="left">??</td><td align="left">工作区</td><td align="center">新增文件, 从未被追踪</td></tr><tr><td align="left">AM</td><td align="left">工作区、暂存区</td><td align="center">未进入过本地仓库</td></tr><tr><td align="left">MM</td><td align="left">工作区、暂存区</td><td align="center">进入过仓库</td></tr><tr><td align="left">MD</td><td align="left">暂存区</td><td align="center">进入过仓库</td></tr><tr><td align="left">A</td><td align="left">暂存区</td><td align="center">未进入本地仓库</td></tr><tr><td align="left">M</td><td align="left">暂存区</td><td align="center">进入过本地仓库</td></tr></tbody></table><p>右边有字母表示有修改未追踪, 在工作区显示(删除文件不显示)<br>左边有字母表示已追踪, 无修改, M 表示 commit 过, A 表示未 commit 过</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><a href="https://git-scm.com/docs/git-add">git add</a></h3><blockquote><p>git-add - Add file contents to the index</p></blockquote><p>追踪文件或修改, add 之后文件会进入暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add &lt;file&gt;          <span class="hljs-comment"># 记录指定文件修改</span><br>$ git add .               <span class="hljs-comment"># 记录当前目录下所有文件修改(上层文件未记录)</span><br>$ git add --all           <span class="hljs-comment"># 记录当前项目所有文件修改(推荐)</span><br></code></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><a href="https://git-scm.com/docs/git-diff">git diff</a></h3><blockquote><p>git-diff - Show changes between commits, commit and working tree, etc</p></blockquote><p>未被追踪和已追踪内容进行比对, 已被追踪则不比对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git diff<br>&gt; diff --git a/test.log b/test.log    <span class="hljs-comment"># 比对 test.log 文件两个状态</span><br>&gt; index 61e2b58..9b6b46c 100644<br>&gt; --- a/test.log                      <span class="hljs-comment"># - 开头是被追踪的内容</span><br>&gt; +++ b/test.log                      <span class="hljs-comment"># + 开头是未被追踪的内容</span><br>&gt; @@ -1 +1,1 @@<br>&gt; -git add once                       <span class="hljs-comment"># 修改前是 git add once</span><br>&gt; \ No newline at end of file<br>&gt; +before second add run git diff     <span class="hljs-comment"># 修改后变成 before second add run git diff</span><br>&gt; \ No newline at end of file<br></code></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><a href="https://git-scm.com/docs/git-commit">git commit</a></h3><blockquote><p>git-commit - Record changes to the repository</p></blockquote><p>通过已追踪的内容生成一个版本放入本地仓库(.git)<br>每 commit 一次便生成了一个可以回退的版本, 即回溯的点<br>commit 时可以添加代码改动信息便于回退时进行定位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>    <span class="hljs-comment"># message 较短可直接填写</span><br>$ git commit -s                       <span class="hljs-comment"># message 较长, 使用默认编辑器编辑 commit</span><br>$ git commit --amend                  <span class="hljs-comment"># 在上次 commit 基础上修改, 并替换原来的 commit</span><br>$ git commit --amend --no-edit        <span class="hljs-comment"># 使用上次 commit 且不修改, 即本次 commit 和上次合并</span><br><br>$ git checkout -- &lt;file&gt;              <span class="hljs-comment"># 撤销工作区的修改, 回到上次 commit 状态</span><br></code></pre></td></tr></table></figure><p>注: 可通过 <code>git config --global core.editor vim</code> 修改编辑器为 <code>vim</code></p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><a href="https://git-scm.com/docs/git-log">git log</a></h3><blockquote><p>git-log - Show commit logs</p></blockquote><p>查看各 commit 版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span>                     <span class="hljs-comment"># 显示所有 commit 的版本的详细信息</span><br>$ git <span class="hljs-built_in">log</span> --pretty=oneline    <span class="hljs-comment"># 显示 commit 版本的简略信息</span><br></code></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><a href="https://git-scm.com/docs/git-reset">git reset</a></h3><blockquote><p>git-reset - Reset current HEAD to the specified state</p></blockquote><p>通过 <code>git log</code> 定位回退的版本, 使用 <code>git reset</code> 执行回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard HEAD^                 <span class="hljs-comment"># 回退到上个版本</span><br>$ git reset --hard HEAD &lt;commit number&gt;  <span class="hljs-comment"># 回到指定 commit 版本</span><br></code></pre></td></tr></table></figure><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>远程仓库是托管在网上的项目版本库, 需要在代码平台上创建, 常见的如</p><ul><li><a href="https://github.com/">Github</a></li><li><a href="https://about.gitlab.com/">Gitlab</a></li><li><a href="https://gitee.com/">Gitee</a></li></ul><p>可以通过两种方式添加远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;Repository url&gt;    <span class="hljs-comment"># 克隆远端仓库到本地, 自动绑定链接对应的仓库</span><br><br>$ git remote -v                 <span class="hljs-comment"># 查看本地仓库关联的所有远端仓库</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init                                  <span class="hljs-comment"># 初始化本地仓库</span><br>$ git add --all                             <span class="hljs-comment"># 追踪目录下所有文件修改</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>          <span class="hljs-comment"># 记录修改生成一个版本到本地仓库</span><br>$ git remote origin add &lt;Repository url&gt;    <span class="hljs-comment"># 将远程仓库命名为 origin 并关联本地仓库</span><br>$ git push -u orighin master                <span class="hljs-comment"># 推送本地所有版本到远程仓库</span><br></code></pre></td></tr></table></figure><ul><li>一个本地仓库可以关联多个远程仓库</li><li>本地仓库可以提交代码到任意一个已关联的远程仓库</li><li>使用克隆后, 该远程仓库默认被命名为 origin</li></ul><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><a href="https://git-scm.com/docs/git-push">git push</a></h3><blockquote><p>git-push - Update remote refs along with associated objects</p></blockquote><p>将本地所有新增的 commit 推送到远端仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push origin master     <span class="hljs-comment"># 提交所有 commit 到 origin 仓库的 master 分支</span><br>$ git push -u origin master  <span class="hljs-comment"># 将 origin 仓库 master 分支作为拉取和推送的默认值</span><br><br>$ git push &lt;repo&gt; &lt;branch&gt;   <span class="hljs-comment"># 使用过 -u 后可以省略仓库和分支</span><br></code></pre></td></tr></table></figure><h2 id="常规流程"><a href="#常规流程" class="headerlink" title="常规流程"></a>常规流程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;repo url&gt;                <span class="hljs-comment"># 克隆远端仓库到本地</span><br>$ git add --all                       <span class="hljs-comment"># 修改完后, 记录所有修改</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span>    <span class="hljs-comment"># 推送到本地仓库</span><br>$ git push -u origin master           <span class="hljs-comment"># 将本地版本提交到远端仓库</span><br><br>$ git commit -a -m <span class="hljs-string">&quot;&lt;commit message&gt;&quot;</span> <span class="hljs-comment"># 同时记录修改并推送到本地仓库</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是从主线延伸出<strong>同源</strong>的备份, 分支可以随意修改操作而不影响主线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch                     <span class="hljs-comment"># 查看所有分支及当前分支所处</span><br>&gt; * master<br>&gt;   fluid<br><br>$ git branch &lt;branch name&gt;       <span class="hljs-comment"># 创建一个分支</span><br><br>$ git checkout &lt;branch name&gt;     <span class="hljs-comment"># 跳转到&lt;branch name&gt;分支</span><br>$ git checkout -b &lt;branch name&gt;  <span class="hljs-comment"># 创建分支并跳转到该分支 </span><br></code></pre></td></tr></table></figure><p>当想要将分支代码并入到主线时, 使用 <code>git checkout</code> 跳转到<strong>主线</strong><br>再使用 <code>git merge &lt;branch name&gt;</code> 便可以将指定分支合并到主线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git branch                  <span class="hljs-comment"># 确认当前分支是否为主线</span><br>$ git merge &lt;branch name&gt;     <span class="hljs-comment"># 将 &lt;branch name&gt; 分支合并到当前所处分支</span><br></code></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>忽略指定文件, 不对其追踪和提交, 文件名固定为 <code>.gitignore</code>, 项目内可创建<strong>多个</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> .gitignore<br>&gt; *.pyc              <span class="hljs-comment"># 忽略当前项目内所有 .pyc 结尾的文件</span><br>&gt; !main.pyc          <span class="hljs-comment"># 强制跟踪所有 main.pyc</span><br>&gt; /*.<span class="hljs-built_in">log</span>             <span class="hljs-comment"># 忽略当前目录下 .log 结尾文件, 不影响上层的文件</span><br>&gt; temp/              <span class="hljs-comment"># 忽略整个项目内所有 temp 文件夹</span><br>&gt; /lib/*.pyc         <span class="hljs-comment"># 忽略当前 lib 目录 下一级的 pyc 文件, lib 下多层目录不受影响  </span><br>&gt; lib/**/.pyc        <span class="hljs-comment"># 忽略项目内所有 lib 文件夹内的 pyc 文件</span><br></code></pre></td></tr></table></figure><h2 id="SSH-key-密钥"><a href="#SSH-key-密钥" class="headerlink" title="SSH key 密钥"></a>SSH key 密钥</h2><p>本地仓库推送代码到远端时, git 会要求用户输入用户名和密码, 设置 ssh key 即可<strong>免密码</strong>推送</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><table><thead><tr><th align="center">密钥</th><th align="center">位置</th></tr></thead><tbody><tr><td align="center">id_rsa (私钥)</td><td align="center"><code>/root/.ssh/id_rsa</code></td></tr><tr><td align="center">id_rsa.pub (公钥)</td><td align="center"><code>/root/.ssh/id_rsa.pub</code></td></tr></tbody></table><p>生成两个密钥文件, 将公钥放到代码托管平台的账号设置中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen                             <span class="hljs-comment"># 自动生成密钥</span><br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;&lt;user.mail&gt;&quot;</span>     <span class="hljs-comment"># 生成 rsa 类型带邮箱注释信息的密钥</span><br></code></pre></td></tr></table></figure><ul><li>密钥由系统生成, 放入用户设置, 所以是系统和账户绑定</li><li>系统下的本地仓库推送代码到该账户使用 ssh 链接时即可免密</li></ul>]]></content>
    
    
    <categories>
      
      <category>share</category>
      
      <category>tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
